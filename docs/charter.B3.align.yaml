# Charter: [B3] ElementRef 解析器

task_id: B3
task_name: ElementRef 统一元素定位协议
stage: B
phase: Align (Retrospective)
created_at: "2025-10-02"
status: COMPLETED
estimated_hours: 2
actual_hours: 2

## Goal (目标)

实现 ElementRef 统一元素定位协议，支持 refId/selector/xpath/index/pagePath 多种定位方式，并提供自动缓存和失效机制。

**核心交付物**:
- `src/core/element-ref.ts` (~150 lines)
- resolveElement() 函数
- resolvePage() 函数
- generateRefId() 函数
- 元素缓存管理

## Non-Goals (非目标)

- ❌ 不支持 XPath 定位（miniprogram-automator 不支持）
- ❌ 不实现元素等待逻辑（属于工具层）
- ❌ 不实现元素查询优化（直接使用 SDK）
- ❌ 不实现跨页面元素引用

## Scope (范围)

### In Scope (包含)

1. **ElementRef 接口**
   - ✅ refId?: string - 缓存句柄引用
   - ✅ selector?: string - WXML/CSS 选择器
   - ✅ xpath?: string - XPath 选择器（抛出不支持错误）
   - ✅ index?: number - 多元素索引
   - ✅ pagePath?: string - 目标页面路径
   - ✅ save?: boolean - 是否缓存并返回 refId

2. **resolveElement() 函数**
   - ✅ 优先从 elementCache 解析 refId
   - ✅ 若无 refId，使用 selector/xpath 查询
   - ✅ 支持 index 索引多元素
   - ✅ 支持 save 参数缓存元素
   - ✅ 返回 Element 对象和新 refId（如果 save=true）

3. **resolvePage() 函数**
   - ✅ 若提供 pagePath，切换到指定页面
   - ✅ 若无 pagePath，返回当前页面
   - ✅ 支持 pagePath 格式验证
   - ✅ 返回 Page 对象

4. **generateRefId() 函数**
   - ✅ 生成唯一元素引用 ID
   - ✅ 格式：`elem-{timestamp}-{random}`
   - ✅ 保证全局唯一性

5. **缓存管理**
   - ✅ 使用 session.elementCache 存储
   - ✅ 自动失效机制（页面切换时清空）
   - ✅ 手动清理接口

### Out of Scope (不包含)

- ❌ XPath 查询实现
- ❌ 元素等待和重试
- ❌ 元素查询性能优化
- ❌ 跨会话元素共享

## Constraints (约束)

### Technical Constraints (技术约束)

1. **miniprogram-automator 限制**
   - 仅支持 CSS 选择器和组件选择器
   - 不支持 XPath
   - 元素句柄无法跨页面使用

2. **缓存失效规则**
   - 页面切换时自动清空缓存
   - 元素销毁时句柄失效
   - 必须处理失效场景

3. **TypeScript 规范**
   - 完整类型定义
   - 严格模式
   - 导入使用 .js 后缀

4. **错误处理**
   - 明确的错误消息
   - 区分不同失败原因
   - 提供调试信息

### Business Constraints (业务约束)

1. **性能要求**: 元素解析 <50ms
2. **缓存容量**: 单会话最多 1000 个元素
3. **兼容性**: 支持所有 WXML 组件

## Success Criteria (成功标准)

### Functional Criteria (功能标准)

- ✅ resolveElement 正确解析 refId
- ✅ resolveElement 正确解析 selector
- ✅ resolveElement 支持 index 索引
- ✅ resolveElement 支持 save 缓存
- ✅ resolvePage 正确切换页面
- ✅ resolvePage 返回当前页面
- ✅ generateRefId 生成唯一 ID
- ✅ XPath 抛出明确错误

### Quality Criteria (质量标准)

- ✅ TypeScript 编译 0 错误
- ✅ 代码行数 ~150 行
- ✅ 无 ESLint 错误
- ✅ JSDoc 注释完整
- ✅ 单元测试覆盖（随工具测试）

### Documentation Criteria (文档标准)

- ✅ ElementRef 接口文档
- ✅ resolveElement/resolvePage 函数文档
- ✅ 缓存机制说明
- ⏳ charter.B3.align.yaml (本文档)
- ⏳ tasks.B3.atomize.md (任务卡)

## Definition of Done (完成标准)

**代码**:
- ✅ `src/core/element-ref.ts` 实现完成 (~150 lines)
- ✅ TypeScript 编译通过
- ✅ 所有函数实现

**测试**:
- ✅ 单元测试随工具测试验证
- ✅ 集成测试覆盖各种定位方式
- ✅ 测试缓存和失效机制

**文档**:
- ⏳ charter.B3.align.yaml (追溯)
- ⏳ tasks.B3.atomize.md (追溯)
- ⏳ session_log (追溯)

**Git**:
- ✅ 已提交（随 C4 Element 工具提交）

## Dependencies (依赖)

**前置任务**:
- ✅ A3: 仓库结构初始化
- ✅ B2: SessionStore（使用 elementCache）
- ✅ miniprogram-automator SDK 了解

**后续任务**:
- B3 → C4 (Element 工具使用解析器)
- B3 → 所有元素操作工具

## Risks (风险)

### Technical Risks (技术风险)

1. **XPath 不支持** - 🟢 已缓解
   - 影响：用户期望使用 XPath
   - 缓解：明确错误消息，引导使用 selector

2. **缓存失效** - 🟢 已缓解
   - 影响：页面切换后元素句柄失效
   - 缓解：自动清空缓存，清晰错误提示

3. **选择器冲突** - 🟡 中风险
   - 影响：selector 匹配多个元素
   - 缓解：支持 index 参数精确定位

### Business Risks (业务风险)

1. **用户体验** - 🟢 低风险
   - 影响：缓存失效导致操作失败
   - 缓解：清晰错误消息，引导重新查询

## Open Questions (未决问题)

- ✅ 是否支持 XPath？（否，SDK 不支持）
- ✅ 缓存容量限制？（1000 个元素/会话）
- ❓ 是否需要支持跨页面元素引用？（当前不支持）

## References (参考资料)

- `docs/微信小程序自动化完整操作手册.md` - 元素查询 API
- `docs/完整实现方案.md` - ElementRef 协议设计
- miniprogram-automator 选择器文档

---

**Approval**: ✅ RETROSPECTIVE APPROVED
**Implementation**: ✅ COMPLETED
**Documentation**: ⏳ IN PROGRESS
