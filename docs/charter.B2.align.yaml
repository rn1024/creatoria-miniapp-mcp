# Charter: [B2] SessionStore 实现

task_id: B2
task_name: SessionStore 会话管理器
stage: B
phase: Align (Retrospective)
created_at: "2025-10-02"
status: COMPLETED
estimated_hours: 2-3
actual_hours: 3

## Goal (目标)

实现会话隔离的 SessionStore，管理多个 MCP 会话的生命周期、资源清理和超时回收。

**核心交付物**:
- `src/core/session.ts` (~200 lines)
- `tests/unit/session.test.ts` (93 tests)
- SessionStore 类：get/set/delete/dispose/getOrCreate/updateActivity
- 自动超时清理机制

## Non-Goals (非目标)

- ❌ 不实现持久化存储（仅内存）
- ❌ 不实现会话共享（跨进程）
- ❌ 不实现会话迁移
- ❌ 不实现分布式锁

## Scope (范围)

### In Scope (包含)

1. **SessionState 接口**
   - ✅ sessionId: string
   - ✅ miniProgram: MiniProgram | null
   - ✅ ideProcess: ChildProcess | null
   - ✅ elementCache: Map<string, Element>
   - ✅ createdAt, lastActivity: Date
   - ✅ outputDir: string

2. **SessionStore 类**
   - ✅ get(sessionId): SessionState | undefined
   - ✅ set(sessionId, state): void
   - ✅ delete(sessionId): void
   - ✅ dispose(): Promise<void>
   - ✅ getOrCreate(sessionId): SessionState
   - ✅ updateActivity(sessionId): void

3. **超时清理**
   - ✅ 定时检查会话活动时间
   - ✅ 超时会话自动清理
   - ✅ 调用 miniProgram.disconnect() 和 ideProcess.kill()
   - ✅ 清理元素缓存

4. **配置选项**
   - ✅ sessionTimeout: number (默认 30 分钟)
   - ✅ outputDir: string (默认 .mcp-artifacts)
   - ✅ cleanupInterval: number (默认 60 秒)

5. **资源清理**
   - ✅ disconnect miniProgram
   - ✅ kill ideProcess
   - ✅ clear elementCache
   - ✅ 日志输出清理结果

### Out of Scope (不包含)

- ❌ 持久化到磁盘/数据库
- ❌ 会话状态序列化
- ❌ 跨进程会话共享
- ❌ 会话快照和恢复

## Constraints (约束)

### Technical Constraints (技术约束)

1. **内存安全**
   - 必须防止内存泄漏
   - 超时会话必须被清理
   - 资源释放必须彻底

2. **并发安全**
   - 支持多会话并发访问
   - Map 操作原子性
   - 避免竞态条件

3. **TypeScript 规范**
   - 完整类型定义
   - 泛型约束
   - 严格模式

4. **测试覆盖**
   - 单元测试覆盖率 >95%
   - 93 个测试用例
   - 覆盖所有边界条件

### Business Constraints (业务约束)

1. **会话超时**: 默认 30 分钟
2. **清理周期**: 每 60 秒检查一次
3. **资源限制**: 支持最多 100 个并发会话
4. **性能要求**: 会话操作 <10ms

## Success Criteria (成功标准)

### Functional Criteria (功能标准)

- ✅ get/set/delete 操作正常
- ✅ getOrCreate 自动创建会话
- ✅ updateActivity 更新时间戳
- ✅ 超时会话自动清理
- ✅ dispose 清理所有会话
- ✅ 资源释放完整（miniProgram/ideProcess/cache）

### Quality Criteria (质量标准)

- ✅ TypeScript 编译 0 错误
- ✅ 93 个测试用例全部通过
- ✅ 代码覆盖率 >95%
- ✅ 无 ESLint 错误
- ✅ JSDoc 注释完整

### Documentation Criteria (文档标准)

- ✅ SessionState 接口文档
- ✅ SessionStore API 文档
- ✅ 配置选项说明
- ⏳ charter.B2.align.yaml (本文档)
- ⏳ tasks.B2.atomize.md (任务卡)

## Definition of Done (完成标准)

**代码**:
- ✅ `src/core/session.ts` 实现完成 (~200 lines)
- ✅ TypeScript 编译通过
- ✅ 所有公共方法实现

**测试**:
- ✅ `tests/unit/session.test.ts` (93 tests)
- ✅ 覆盖所有方法
- ✅ 测试超时清理逻辑
- ✅ 测试资源释放

**文档**:
- ⏳ charter.B2.align.yaml (追溯)
- ⏳ tasks.B2.atomize.md (追溯)
- ⏳ session_log (追溯)

**Git**:
- ✅ 已提交（随 A2-B1-B2 修复提交）

## Dependencies (依赖)

**前置任务**:
- ✅ A3: 仓库结构初始化
- ✅ TypeScript 配置完成

**后续任务**:
- B2 → B1 (Server 依赖 SessionStore)
- B2 → C1-C4 (工具需要会话管理)

## Risks (风险)

### Technical Risks (技术风险)

1. **内存泄漏** - 🟢 已缓解
   - 影响：长时间运行内存溢出
   - 缓解：定时清理 + dispose 机制

2. **资源泄漏** - 🟢 已缓解
   - 影响：进程/连接未关闭
   - 缓解：完整的清理流程 + 测试验证

3. **并发问题** - 🟢 低风险
   - 影响：竞态条件导致状态不一致
   - 缓解：Map 原子操作，简单锁机制

### Business Risks (业务风险)

1. **超时配置不当** - 🟡 中风险
   - 影响：会话过早清理或内存占用过高
   - 缓解：可配置超时时间，默认值经过测试

## Open Questions (未决问题)

- ✅ 会话超时时间设置为多少合适？（已确定：30 分钟）
- ✅ 是否需要会话持久化？（否，仅内存存储）
- ❓ 是否需要支持会话优先级？（当前无）

## References (参考资料)

- `docs/完整实现方案.md` - 会话管理架构
- `src/types.ts` - SessionState 接口定义
- Node.js ChildProcess API 文档

---

**Approval**: ✅ RETROSPECTIVE APPROVED
**Implementation**: ✅ COMPLETED
**Documentation**: ⏳ IN PROGRESS
