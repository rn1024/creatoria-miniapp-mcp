# Charter: [C5] 工具注册器

task_id: C5
task_name: 工具注册器实现（registerTools 函数 + 元数据系统）
stage: C
phase: Align (Retrospective)
created_at: "2025-10-02"
status: COMPLETED
estimated_hours: 3-4
actual_hours: 4

## Goal (目标)

实现统一的工具注册系统，按 capabilities 动态注册工具，提供工具分类、元数据管理和验证机制。

**核心交付物**:
- `src/tools/index.ts` - registerTools 函数 + 元数据系统 (1433 lines)
- `tests/unit/tool-registration.test.ts` - 单元测试 (400 lines, 46 tests)
- 功能:
  - registerTools(server, context) 函数
  - 6 个工具分类系统（AUTOMATOR, MINIPROGRAM, PAGE, ELEMENT, ASSERT, SNAPSHOT）
  - TOOL_CATEGORIES 元数据（工具分类、描述、数量统计）
  - Capabilities 过滤机制
  - Schema 验证和 handler 绑定

## Non-Goals (非目标)

- ❌ 不实现工具的具体逻辑（由 C1-C4 完成）
- ❌ 不实现动态工具加载（静态注册）
- ❌ 不实现工具版本管理
- ❌ 不实现工具权限控制

## Scope (范围)

### In Scope (包含)

1. **registerTools 函数**
   - ✅ 接收 MCP Server 实例
   - ✅ 接收 ToolContext（getSession, deleteSession 回调）
   - ✅ 根据 capabilities 过滤工具
   - ✅ 批量注册工具到 Server
   - ✅ 返回已注册工具列表

2. **工具分类系统**
   - ✅ AUTOMATOR_TOOLS: 4 个工具（launch, connect, disconnect, close）
   - ✅ MINIPROGRAM_TOOLS: 6 个工具（navigate, callWx, evaluate, screenshot, getPageStack, getSystemInfo）
   - ✅ PAGE_TOOLS: 8 个工具（query, queryAll, waitFor, getData, setData, callMethod, getSize, getScrollTop）
   - ✅ ELEMENT_TOOLS: 23 个核心工具 + 子类操作
   - ✅ ASSERT_TOOLS: 断言工具（Stage D）
   - ✅ SNAPSHOT_TOOLS: 快照工具（Stage D）

3. **TOOL_CATEGORIES 元数据**
   - ✅ 工具分类名称和描述
   - ✅ 每个分类包含的工具列表
   - ✅ 工具数量统计
   - ✅ Capability 映射关系

4. **Capabilities 过滤**
   - ✅ 支持 'core'（Automator + MiniProgram + Page + Element）
   - ✅ 支持 'assert'（Assert 工具）
   - ✅ 支持 'snapshot'（Snapshot 工具）
   - ✅ 支持 'record'（Record 工具）
   - ✅ 支持 'network'（Network Mock 工具）
   - ✅ 支持 'tracing'（Tracing 工具）
   - ✅ 支持组合 capabilities

5. **工具验证**
   - ✅ Schema 定义验证
   - ✅ Handler 函数存在性检查
   - ✅ 工具名称唯一性检查
   - ✅ 错误日志和异常处理

6. **ToolContext 接口**
   - ✅ getSession(sessionId): Session
   - ✅ deleteSession(sessionId): void
   - ✅ 传递给所有工具 handler

### Out of Scope (不包含)

- ❌ 工具具体实现（C1-C4）
- ❌ 动态工具加载
- ❌ 工具版本管理
- ❌ 工具权限控制
- ❌ 工具使用统计

## Constraints (约束)

### Technical Constraints (技术约束)

1. **MCP SDK 兼容**
   - 使用 Server.setRequestHandler(CallToolRequestSchema, ...)
   - 遵循 MCP 工具定义规范
   - 正确返回工具列表和执行结果

2. **工具命名规范**
   - 格式: `miniapp_{level}_{action}`
   - 示例: `miniapp_automator_launch`, `miniapp_element_tap`
   - 全局唯一性

3. **Capabilities 映射**
   - core: Automator + MiniProgram + Page + Element
   - assert: Assert 工具
   - snapshot: Snapshot 工具
   - record: Record 工具
   - network: Network Mock 工具
   - tracing: Tracing 工具

4. **ToolContext 依赖注入**
   - 通过参数传递 getSession/deleteSession
   - 避免全局状态
   - 便于测试和扩展

### Business Constraints (业务约束)

1. **注册时间**: <100ms
2. **工具总数**: 当前 ~60 个工具（core + assert + snapshot）
3. **内存占用**: 注册后 <10MB

## Success Criteria (成功标准)

### Functional Criteria (功能标准)

- ✅ registerTools 正确注册工具
- ✅ capabilities 过滤正确
- ✅ 工具 handler 正确绑定
- ✅ schema 验证通过
- ✅ 返回正确的工具列表
- ✅ TOOL_CATEGORIES 元数据完整

### Quality Criteria (质量标准)

- ✅ TypeScript 编译 0 错误
- ✅ 单元测试覆盖率 >80%
- ✅ 46 个测试用例全部通过
- ✅ 无 ESLint 错误
- ✅ JSDoc 注释完整

### Documentation Criteria (文档标准)

- ✅ registerTools 函数有详细注释
- ✅ TOOL_CATEGORIES 有清晰说明
- ✅ Capabilities 映射文档完整
- ⏳ charter.C5.align.yaml (本文档)
- ⏳ tasks.C5.atomize.md (任务卡)

## Definition of Done (完成标准)

**代码**:
- ✅ `src/tools/index.ts` 实现完成 (1433 lines)
- ✅ TypeScript 编译通过
- ✅ registerTools 函数正确工作

**测试**:
- ✅ `tests/unit/tool-registration.test.ts` (400 lines)
- ✅ 46 个测试用例全部通过
- ✅ 覆盖所有 capabilities 组合
- ✅ Mock Server 和 Context

**文档**:
- ⏳ charter.C5.align.yaml (追溯)
- ⏳ tasks.C5.atomize.md (追溯)
- ✅ README 工具列表更新

**Git**:
- ✅ 已提交（Stage C 提交）

## Dependencies (依赖)

**前置任务**:
- ✅ C1: Automator 工具
- ✅ C2: MiniProgram 工具
- ✅ C3: Page 工具
- ✅ C4: Element 工具
- ✅ B1: MCP Server 骨架

**后续任务**:
- C5 → E3 (CLI 传递 capabilities 参数)
- C5 → D1 (Assert 工具注册)
- C5 → D2 (Snapshot 工具注册)

## Risks (风险)

### Technical Risks (技术风险)

1. **工具数量增长** - 🟡 中风险
   - 影响：工具过多可能影响性能
   - 缓解：按 capabilities 分组加载

2. **命名冲突** - 🟢 已缓解
   - 风险：工具名称重复
   - 缓解：注册时检查唯一性

3. **Schema 验证失败** - 🟢 已缓解
   - 风险：Schema 定义错误导致注册失败
   - 缓解：单元测试覆盖所有工具

### Business Risks (业务风险)

1. **注册时间过长** - 🟢 已缓解
   - 影响：启动慢
   - 缓解：优化注册逻辑，<100ms

## Open Questions (未决问题)

- ❓ 是否需要支持动态工具加载？（当前静态注册）
- ❓ 是否需要工具版本管理？（当前无版本）
- ❓ 是否需要工具使用统计？（当前不收集）

## References (参考资料)

- `docs/完整实现方案.md` - 工具分层设计
- `docs/微信小程序自动化完整操作手册.md` - 完整 API 参考
- `@modelcontextprotocol/sdk` 文档
- C1-C4 任务文档

---

**Approval**: ✅ RETROSPECTIVE APPROVED
**Implementation**: ✅ COMPLETED (1433 lines + 46 tests)
**Documentation**: ⏳ IN PROGRESS
