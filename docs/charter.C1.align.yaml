# Charter: [C1] Automator 工具

task_id: C1
task_name: Automator 工具实现
stage: C
phase: Align (Retrospective)
created_at: "2025-10-02"
status: COMPLETED
estimated_hours: 2-3
actual_hours: 3

## Goal (目标)

实现 Automator 级别的 4 个 MCP 工具，封装微信开发者工具的启动、连接、断开和关闭功能。

**核心交付物**:
- `src/tools/automator.ts` - 4 个工具实现 (252 lines)
- `tests/unit/automator.test.ts` - 单元测试 (364 lines, 20 tests)
- 工具: launch, connect, disconnect, close

## Non-Goals (非目标)

- ❌ 不实现 MiniProgram 级别工具（留给 C2）
- ❌ 不实现配置文件管理（使用默认配置）
- ❌ 不实现自动重连机制（简单失败返回）
- ❌ 不实现端口冲突检测（用户自行处理）

## Scope (范围)

### In Scope (包含)

1. **launch 工具**
   - ✅ 启动微信开发者工具
   - ✅ 支持自定义项目路径
   - ✅ 支持自定义端口（默认 9420）
   - ✅ 支持自定义 CLI 路径（默认 macOS 路径）
   - ✅ 返回会话 ID 和启动状态

2. **connect 工具**
   - ✅ 连接到已启动的开发者工具
   - ✅ 支持自定义端口
   - ✅ 获取 MiniProgram 实例
   - ✅ 返回连接成功状态

3. **disconnect 工具**
   - ✅ 断开当前连接
   - ✅ 清理 MiniProgram 实例
   - ✅ 保留 IDE 进程（不关闭）

4. **close 工具**
   - ✅ 关闭微信开发者工具
   - ✅ 终止 IDE 进程
   - ✅ 清理会话资源

### Out of Scope (不包含)

- ❌ 多实例管理（一次仅支持一个会话）
- ❌ 自动重连机制
- ❌ 端口冲突解决
- ❌ Windows/Linux CLI 路径支持

## Constraints (约束)

### Technical Constraints (技术约束)

1. **miniprogram-automator 依赖**
   - 必须使用官方 `miniprogram-automator` SDK
   - 遵循其 launch/connect API 规范
   - 正确处理异步操作和错误

2. **Session 隔离**
   - 每个会话独立的 automator 实例
   - 会话 ID 自动生成（UUID）
   - 通过 SessionStore 管理生命周期

3. **默认配置**
   - CLI 路径: `/Applications/wechatwebdevtools.app/Contents/MacOS/cli`
   - 端口: 9420
   - 超时: 30 秒

4. **错误处理**
   - 明确区分启动失败 vs 连接失败
   - 返回清晰的错误消息
   - 记录详细错误日志

### Business Constraints (业务约束)

1. **启动时间**: <10 秒
2. **连接时间**: <3 秒
3. **关闭时间**: <2 秒
4. **兼容性**: macOS 优先，微信开发者工具 1.06+

## Success Criteria (成功标准)

### Functional Criteria (功能标准)

- ✅ launch 成功启动开发者工具
- ✅ connect 成功连接并获取 MiniProgram 实例
- ✅ disconnect 断开连接但保留 IDE
- ✅ close 完全关闭 IDE 和会话
- ✅ 错误场景正确处理（端口占用、CLI 不存在等）

### Quality Criteria (质量标准)

- ✅ TypeScript 编译 0 错误
- ✅ 单元测试覆盖率 >80%
- ✅ 20 个测试用例全部通过
- ✅ 无 ESLint 错误
- ✅ JSDoc 注释完整

### Documentation Criteria (文档标准)

- ✅ 每个工具有 zod schema 定义
- ✅ 工具描述清晰（inputSchema.description）
- ✅ 函数签名有 JSDoc
- ⏳ charter.C1.align.yaml (本文档)
- ⏳ tasks.C1.atomize.md (任务卡)

## Definition of Done (完成标准)

**代码**:
- ✅ `src/tools/automator.ts` 实现完成 (252 lines)
- ✅ TypeScript 编译通过
- ✅ 4 个工具正确注册

**测试**:
- ✅ `tests/unit/automator.test.ts` (364 lines)
- ✅ 20 个测试用例全部通过
- ✅ 覆盖成功/失败场景
- ✅ Mock miniprogram-automator 依赖

**文档**:
- ⏳ charter.C1.align.yaml (追溯)
- ⏳ tasks.C1.atomize.md (追溯)
- ✅ README 工具列表更新

**Git**:
- ✅ 已提交（Stage C 提交）

## Dependencies (依赖)

**前置任务**:
- ✅ B1: MCP Server 骨架
- ✅ B2: SessionStore 实现
- ✅ `miniprogram-automator` 已安装

**后续任务**:
- C1 → C2 (需要 MiniProgram 实例)
- C1 → C5 (工具注册器集成)

## Risks (风险)

### Technical Risks (技术风险)

1. **CLI 路径变化** - 🟡 中风险
   - 影响：微信开发者工具更新可能改变 CLI 路径
   - 缓解：允许用户自定义 CLI 路径

2. **端口冲突** - 🟡 中风险
   - 影响：端口被占用导致启动失败
   - 缓解：明确错误提示，建议更换端口

3. **进程泄漏** - 🟢 已缓解
   - 风险：异常退出导致 IDE 进程残留
   - 缓解：优雅关闭机制，SessionStore.dispose() 清理

### Business Risks (业务风险)

1. **跨平台兼容** - 🟡 中风险
   - 影响：当前仅支持 macOS
   - 缓解：文档明确说明，未来扩展 Windows/Linux

## Open Questions (未决问题)

- ❓ 是否需要支持多个小程序同时运行？（当前单实例）
- ❓ 是否需要自动重连机制？（当前无）
- ❓ 是否需要端口自动探测？（当前手动指定）

## References (参考资料)

- `docs/微信小程序自动化完整操作手册.md` - Automator API 文档
- `docs/完整实现方案.md` - 工具分层设计
- `miniprogram-automator` 官方文档
- `src/core/session.ts` - Session 管理

---

**Approval**: ✅ RETROSPECTIVE APPROVED
**Implementation**: ✅ COMPLETED
**Documentation**: ⏳ IN PROGRESS
