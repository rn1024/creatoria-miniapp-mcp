# Charter: F2 - 失败时自动快照收集

## 项目信息
project: creatoria-miniapp-mcp
stage: F - 可观测性与产物输出
task_id: F2
title: 失败时自动收集截图和数据快照
owner: ClaudeCode
created: 2025-10-03
status: in_progress

## 1. 目标 (Goals)
### 主要目标
- **自动诊断收集**：工具调用失败时自动捕获页面快照和截图，无需手动触发
- **上下文保留**：保存失败时的完整上下文（错误信息、工具参数、堆栈跟踪）
- **可配置化**：允许用户启用/禁用自动快照，避免产生过多文件
- **产物组织**：统一输出到 `artifacts/failures/` 目录，便于后续分析

### 业务价值
- **提升调试效率**：失败时自动保存现场，开发者可直接查看快照而非重现问题
- **增强可观测性**：配合 F1 日志系统，提供完整的故障诊断链路
- **降低维护成本**：减少"无法复现"问题的排查时间

## 2. 非目标 (Non-Goals)
- ❌ 不实现失败重试机制（属于工具层面的可靠性增强）
- ❌ 不实现快照的自动分析/报告生成（留给 F3 任务）
- ❌ 不实现快照的自动清理策略（由用户或外部工具管理）
- ❌ 不支持自定义快照触发条件（仅在工具失败时触发）

## 3. 范围 (Scope)
### In Scope
- ✅ 扩展 ToolLogger 支持失败快照
- ✅ 配置项：`enableFailureSnapshot` (默认: false)
- ✅ 失败快照包含：
  - 页面截图（PNG 格式）
  - 页面数据快照（JSON 格式）
  - 错误上下文（工具名、参数、错误消息、堆栈）
- ✅ 产物目录结构：`artifacts/failures/{sessionId}/{toolName}-{timestamp}/`
- ✅ 与 D2 快照工具集成（复用 snapshotPage/snapshotFull）
- ✅ 单元测试覆盖

### Out of Scope
- 🚫 视频录制（超出快照范畴）
- 🚫 多页面快照（只捕获当前页面）
- 🚫 快照压缩/归档（用户自行处理）
- 🚫 快照上传到云存储（超出本地 MCP 职责）

## 4. 约束 (Constraints)
### 技术约束
- **依赖 D2**：必须在 miniProgram 已连接且 D2 快照工具可用时才能收集
- **性能影响**：快照收集是异步操作，不应阻塞错误抛出
- **磁盘空间**：每次失败产生 ~100KB-5MB 文件（截图主要占用）
- **Node.js 版本**：需要 Node 18+（与项目要求一致）

### 设计约束
- **Fire-and-Forget**：快照收集失败不应影响原始错误的抛出
- **幂等性**：同一错误不应重复收集快照
- **安全性**：快照文件名必须经过验证，防止路径遍历

## 5. 解决方案 (Solution)
### 5.1 架构设计
```
┌─────────────────────────────────────────────────────────────┐
│                      ToolLogger.wrap()                       │
├─────────────────────────────────────────────────────────────┤
│  try {                                                       │
│    const result = await handler(session, args)              │
│    logger.info('Tool call completed', { result })           │
│    return result                                             │
│  } catch (error) {                                           │
│    logger.error('Tool call failed', { error })              │
│    ┌──────────────────────────────────────────────────┐    │
│    │ if (config.enableFailureSnapshot) {              │    │
│    │   void this.captureFailureSnapshot({             │    │
│    │     session, toolName, args, error               │    │
│    │   }).catch(e => logger.warn('Snapshot failed'))  │    │
│    │ }                                                 │    │
│    └──────────────────────────────────────────────────┘    │
│    throw error // ✅ 不阻塞错误抛出                         │
│  }                                                           │
└─────────────────────────────────────────────────────────────┘
```

### 5.2 快照收集流程
```yaml
步骤:
  1. 检查前提条件:
     - session.miniProgram 存在
     - session.outputManager 存在
     - config.enableFailureSnapshot === true

  2. 生成失败目录:
     - 路径: artifacts/failures/{sessionId}/{toolName}-{timestamp}/
     - 创建目录（如不存在）

  3. 收集快照数据:
     - 调用 snapshotPage() 获取页面数据 + 截图
     - 捕获系统信息（可选）

  4. 保存错误上下文:
     - 文件: error-context.json
     - 内容:
       - toolName: 失败的工具名称
       - timestamp: ISO 8601 时间戳
       - error: { message, stack, code }
       - args: 工具调用参数（已脱敏）
       - duration: 执行耗时（ms）

  5. 日志记录:
     - logger.info('Failure snapshot captured', { path })
     - 失败则 logger.warn('Failed to capture snapshot')
```

### 5.3 配置扩展
```typescript
// src/types.ts
interface LoggerConfig {
  level?: LogLevel
  enableFileLog?: boolean
  outputDir?: string
  bufferSize?: number
  flushInterval?: number
  enableFailureSnapshot?: boolean // 🆕 默认 false
}

// src/config/defaults.ts
const DEFAULT_LOGGER_CONFIG = {
  // ...existing
  enableFailureSnapshot: false,
}
```

### 5.4 目录结构示例
```
.mcp-artifacts/
└── session-abc123-2025-10-03T12-34-56/
    ├── logs/
    │   └── session-abc123.log
    └── failures/                          # 🆕 失败快照目录
        ├── element_click-20251003-123500/ # 🆕 按工具+时间分组
        │   ├── snapshot.json              # 页面数据快照
        │   ├── snapshot.png               # 页面截图
        │   └── error-context.json         # 错误上下文
        └── page_navigate-20251003-123600/
            ├── snapshot.json
            ├── snapshot.png
            └── error-context.json
```

## 6. 实现计划 (Implementation Plan)
### Phase 1: 核心实现 (1.5h)
- [ ] 扩展 `LoggerConfig` 类型定义 (`src/types.ts`)
- [ ] 添加配置默认值 (`src/config/defaults.ts`)
- [ ] 实现 `ToolLogger.captureFailureSnapshot()` 方法
- [ ] 集成到 `ToolLogger.wrap()` 的 catch 块

### Phase 2: 测试验证 (1h)
- [ ] 单元测试：验证快照收集逻辑
- [ ] 单元测试：验证配置开关生效
- [ ] 单元测试：验证错误不被快照阻塞
- [ ] 集成测试：端到端验证失败场景

### Phase 3: 文档完善 (0.5h)
- [ ] 更新架构文档 (`docs/architecture.F2.md`)
- [ ] 更新使用示例（启用失败快照）
- [ ] 更新配置文档

## 7. 验收标准 (Definition of Done)
### 功能验收
- ✅ 工具调用失败时，自动生成快照文件（当 `enableFailureSnapshot: true`）
- ✅ 快照包含：snapshot.json, snapshot.png, error-context.json
- ✅ 配置为 `false` 时，不生成快照
- ✅ 快照收集失败不影响原始错误抛出

### 质量验收
- ✅ 新增测试用例全部通过
- ✅ 现有测试用例无回归（395+ 全通过）
- ✅ TypeScript 编译无错误
- ✅ 代码格式化完成（Prettier）

### 文档验收
- ✅ charter.F2.align.yaml 完成
- ✅ architecture.F2.md 完成
- ✅ 配置示例更新

## 8. 风险与缓解 (Risks)
### 风险 #1: 快照收集耗时影响用户体验
- **影响**: 用户等待错误返回时间变长
- **缓解**: Fire-and-forget 模式，不阻塞错误抛出
- **监控**: 记录快照收集耗时到日志

### 风险 #2: miniProgram 未连接时无法快照
- **影响**: 某些工具失败时无快照（如 launch 失败）
- **缓解**: 添加前提条件检查，graceful 降级
- **监控**: 日志记录快照收集失败原因

### 风险 #3: 磁盘空间耗尽
- **影响**: 快照保存失败
- **缓解**:
  - 复用 F1 的磁盘空间检查逻辑
  - 默认关闭快照功能
  - 文档建议定期清理
- **监控**: 磁盘空间不足时警告日志

### 风险 #4: 敏感数据泄漏到快照
- **影响**: 快照文件包含敏感信息
- **缓解**:
  - 复用 F1 的脱敏逻辑处理 args
  - 文档提醒用户快照文件的隐私风险
- **监控**: Code review 检查脱敏逻辑

## 9. 依赖关系 (Dependencies)
### 输入依赖
- ✅ **D2 (快照工具)**：snapshotPage/snapshotFull 已实现
- ✅ **F1 (日志系统)**：ToolLogger 已实现
- ✅ **OutputManager**：文件管理已实现

### 输出依赖
- ⏳ **F3 (会话报告)**：将使用 F2 的失败快照生成汇总报告

## 10. 里程碑 (Milestones)
| 里程碑 | 目标 | 预计完成 |
|--------|------|----------|
| M1 | 核心实现完成 | T+1.5h |
| M2 | 测试验证通过 | T+2.5h |
| M3 | 文档完善 | T+3h |
| M4 | Code Review + 提交 | T+3.5h |

## 11. 成功指标 (Success Metrics)
- **功能完整性**: 失败快照收集成功率 100%（前提条件满足时）
- **性能影响**: 快照收集耗时 < 500ms（不阻塞错误）
- **测试覆盖**: 新增代码分支覆盖率 > 90%
- **用户体验**: 默认关闭，不影响现有用户

## 12. 开放问题 (Open Questions)
- ❓ Q1: 是否需要限制快照文件数量上限？
  - 建议：暂不限制，由用户管理；文档提醒定期清理

- ❓ Q2: 是否需要支持自定义快照内容？
  - 建议：F2 保持简单，自定义留给用户手动调用 snapshot 工具

- ❓ Q3: 是否需要记录失败统计（哪些工具失败最多）？
  - 建议：留给 F3 会话报告任务

## 13. 审批记录 (Approvals)
- [ ] **技术方案审批**: 待审批
- [ ] **安全审查**: 待审批
- [ ] **实现批准**: 待批准
